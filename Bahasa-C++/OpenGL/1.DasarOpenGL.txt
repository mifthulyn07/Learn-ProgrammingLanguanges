ProjectOptions >>> Parameters >>> Linker >>> TulisSepertiDibawah >>> OK
-lopengl32
-lfreeglut
-lglu32
---------------------------------------------------------------------------------------------------------------------
>>>>>MEMULAI JENDELA OPEN GL<<<<<
#include <gl/glut.h>
void Jendela (void){
	glClear (GL_COLOR_BUFFER_BIT);
	glFlush();
}
int main(int argc, char*argv[]){
	glutInit (&argc, argv);
	glutInitWindowSize (640,480);
	glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
	glutCreateWindow("Membuat Jendela");
	glutDisplayFunc(Jendela);
	glClearColor (1.0f, 0.11f, 0.68f, 0.0f);
	glutMainLoop();
	return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------
>>>>>MEMBUAT TITIK<<<<<
#include <gl/glut.h>
void Point (void){
	glClear (GL_COLOR_BUFFER_BIT);
	glPointSize (5.0f);
	glBegin(GL_POINTS);
			glColor3f (1.0f, 0.0f, 0.0f);//merah
			glVertex3f (0.0, 0.0, 0.0);
			
			glColor3f (0.0f, 1.0f, 0.0f);//hijau
			glVertex3f (-0.25, 0.25, 0.0);
			
			glColor3f (0.0f, 0.0f, 1.0f);//biru
			glVertex3f (0.30, 0.10, 0.0);
			
			glColor3f (1.0f, 1.0f, 0.0f);//kuning
			glVertex3f (-0.40, 0.25, 0.0);
	glEnd();
	glFlush();
}
int main(int argc, char*argv[]){
	glutInit (&argc, argv);
	glutInitWindowSize (640,480);
	glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
	glutCreateWindow("Membuat titik");
	glutDisplayFunc(Point);
	glClearColor (1.0f, 1.0f, 1.0f, 1.0f);
	glutMainLoop();
	return 0;
}
---------------------------------------------------------------------------------------------------
>>>>>MEMBUAT GARIS<<<<<
#include <gl/glut.h>
void Garis (void){
	glClear (GL_COLOR_BUFFER_BIT);
	glPointSize (10.0f);
	glBegin(GL_POINTS);
			glColor3f (1.0f, 0.0f, 0.0f);//merah
			glVertex3f (0.0, 0.0, 0.0);
	glEnd();
	glLineWidth (2.0f);
	glBegin(GL_LINES);
			glColor3f (1.0f, 0.0f, 0.0f);//merah
			glVertex3f (0.0f, 0.20f, 0.0f);
			glVertex3f (0.0f, -0.20f, 0.0f);
			
			glColor3f (0.0f, 1.0f, 0.0f);//hijau
			glVertex3f (0.0f, 0.20f, 0.0f);
			glVertex3f (0.20f, 0.00f, 0.0f);
			
			glColor3f (0.0f, 0.0f, 1.0f);//biru
			glVertex3f (0.20f, 0.0f, 0.0f);
			glVertex3f (0.40f, 0.20f, 0.0f);
			
			glColor3f (0.1f, 0.1f, 0.0f);//hitam
			glVertex3f (0.40f, 0.20f, 0.0f);
			glVertex3f (0.40f, -0.20f, 0.0f);
	glEnd();
	glFlush();
}
int main(int argc, char*argv[]){
	glutInit (&argc, argv);
	glutInitWindowSize (640,480);
	glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
	glutCreateWindow("Membuat Garis");
	glutDisplayFunc(Garis);
	glClearColor (1.0f, 1.0f, 1.0f, 1.0f);
	glutMainLoop();
	return 0;
}
-------------------------------------------------------------------------------------------------------------------
>>>>>MEMBUAT SEGI TIGA<<<<<
#include <gl/glut.h>
void Segitiga (void)
{
    glClear (GL_COLOR_BUFFER_BIT);
    glBegin (GL_TRIANGLES);//hanya bisa sampai 1 segitiga saja
			glColor3f(1.0f, 0.0f,0.0f); glVertex3f (0.10, 0.0, 0.0);//merah
			glColor3f(1.0f, 1.0f,0.0f); glVertex3f (0.50, 0.0, 0.0);//kuning
			glColor3f(1.0f, 0.0f,1.0f); glVertex3f (0.30, 0.30, 0.0);//ungu
    glEnd();
    glBegin (GL_TRIANGLE_STRIP);//hanya sampai 2 segitiga saja 
			glColor3f(1.0f, 0.0f,0.0f); glVertex3f (-0.10,-0.10,0.0);//merah
			glColor3f(1.0f, 1.0f,0.0f); glVertex3f (0.10, -0.10, 0.0);//kuning
			glColor3f(1.0f, 0.0f,1.0f); glVertex3f (-0.20f, 0.10f,0.0f);//ungu
			glColor3f(1.0f, 0.0f,1.0f); glVertex3f (0.00, 0.10, 0.0);//ungu		
    glEnd();
    
    glBegin (GL_TRIANGLE_FAN);//bisa betambah banyak segitiga
			glColor3f(1.0f, 0.0f,0.0f); glVertex3f (-0.30, 0.0 ,0.0);//merah
			glColor3f(1.0f, 0.0f,1.0f); glVertex3f (-0.30f, 0.30f,0.0f);//ungu
			glColor3f(1.0f, 0.0f,1.0f); glVertex3f (-0.60, 0.30, 0.0);//ungu
			glColor3f(1.0f, 1.0f,0.0f); glVertex3f (-0.60, 0.0, 0.0);//kuning
			glColor3f(0.0f, 1.0f,0.0f); glVertex3f (-0.60f, -0.30f,0.0f);//hijau
    glEnd();
    glFlush ();
}

int main (int argc, char*argv[])
{
    glutInit (&argc, argv);
    glutInitWindowSize (640,480);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
    glutCreateWindow ("Menggambar Segitiga");
    glutDisplayFunc (Segitiga);
    glClearColor (1.0f, 1.0f, 1.0f, 1.0f);
    glutMainLoop ();
    return 0;
}
--------------------------------------------------------------------------------------------------------------------------
>>>>>MEMBUAT SEGI EMPAT<<<<<
#include <gl/glut.h>
void Segiempat (void)
{
     glClear (GL_COLOR_BUFFER_BIT);
     glColor3f (0.5f, 1.0f, 1.0f);
     glRectf(0.0, 0.0, 0.4, 0.4);//(x,y,x,y)z=0 perhatikan diagonal saja
     
     glColor3f (0.5f, 1.0f, 1.0f);
     glRectf(0.0, 0.0, -0.4, -0.4);//(x,y,x,y)z=0 perhatikan diagonal saja
     glFlush();
}
int main (int argc, char*argv[])
{
    glutInit (&argc, argv);
    glutInitWindowSize (640,480);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
    glutCreateWindow ("Membuat Segiempat");
    glutDisplayFunc (Segiempat);
    glClearColor (1.0f, 1.0f, 1.0f, 1.0f);
    glutMainLoop ();
    return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------
>>>>>STACK OBJECT<<<<<
#include <gl/glut.h>
#include <gl/gl.h>
#include <math.h>

void RenderScene(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	
	glPushMatrix();
	glLineWidth(2.0f);
	glBegin(GL_LINES);
			glColor3f(1.0, 1.0, 1.0);
			glVertex3f(0.0, 0.2, 0.0);
			glVertex3f(0.0, -0.2, 0.0);
	glEnd();
	glPopMatrix();
	
	glPushMatrix();
	glPointSize(5.0f);
	glTranslatef(0.35, 0.35, 0.0);
	glBegin(GL_POINTS);
				glColor3f(1.0, 1.0, 1.0);
				glVertex3f(0.25, 0.25, 0.0);
	glEnd();
	glPopMatrix();
	
	glPushMatrix();
	glTranslatef(0.5, 0.5, 0.0);
	glBegin(GL_TRIANGLE_STRIP);
			glColor3f(0.0f, 1.0f, 0.0f); glVertex3f(-0.05,-0.05, 0.0);//hijau
			glColor3f(1.0f, 1.0f, 0.0f); glVertex3f( 0.15,-0.05, 0.0);//kuning
			glColor3f(0.5f, 1.0f, 1.0f); glVertex3f(-0.05, 0.05, 0.0);//ungu
			glColor3f(0.5f, 1.0f, 1.0f); glVertex3f( 0.15, 0.05, 0.0);//cyan
	glEnd();
	glPopMatrix();
}
int main(int argc, char** argv) {
	glutInit (&argc, argv);
	glutInitWindowSize (640,480);
	glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
	glutCreateWindow("Stack Object");
	glutDisplayFunc(RenderScene);
	glClearColor (1.0f, 0.11f, 0.68f, 0.0f);
	glutMainLoop();
	return 0;
}
--------------------------------------------------------------------------------------------------
>>>>>TRANSLASI<<<<<
#include <gl/glut.h>
void Translasi2D (void)
{
    glClear (GL_COLOR_BUFFER_BIT);
    glTranslatef (0.20, 0.20, 0.00);//translasi hanya bisa dilakukan 1 bidang saja 
    glColor3f (0.5f, 1.0f, 1.0f);
	glRectf(0.0, 0.0, 0.4, 0.4);//(x,y,x,y)z=0 perhatikan diagonal saja
    glFlush();
}        
     
int main (int argc, char*argv[])
{
    glutInit (&argc, argv);
    glutInitWindowSize (640,480);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
    glutCreateWindow ("Menggeser Segiempat");
    glutDisplayFunc (Translasi2D);
    glClearColor (1.0f, 1.0f, 1.0f, 1.0f);
    glutMainLoop ();
    return 0;
}
-----------------------------------------------------------------------------------------------------------
>>>>>ROTASI<<<<<
#include <gl/glut.h>
void Segitiga (void)
{
    glClear (GL_COLOR_BUFFER_BIT);
   	glPointSize (10.0f);
	glBegin(GL_POINTS);
			glColor3f (1.0f, 0.0f, 0.0f);//merah
			glVertex3f (0.0, 0.0, 0.0);
	glEnd();
   
    glRotated (60.0, 0.0, 0.0, 1.0);
    glBegin (GL_TRIANGLES);//hanya bisa sampai 1 segitiga saja
			glColor3f(1.0f, 0.0f,0.0f); glVertex3f (0.10, 0.0, 0.0);//merah
			glColor3f(1.0f, 1.0f,0.0f); glVertex3f (0.50, 0.0, 0.0);//kuning
			glColor3f(1.0f, 0.0f,1.0f); glVertex3f (0.30, 0.30, 0.0);//ungu
    glEnd();
    glFlush ();
}

int main (int argc, char*argv[])
{
    glutInit (&argc, argv);
    glutInitWindowSize (640,480);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
    glutCreateWindow ("Menggambar Segitiga");
    glutDisplayFunc (Segitiga);
    glClearColor (1.0f, 1.0f, 1.0f, 1.0f);
    glutMainLoop ();
    return 0;
}
---------------------------------------------------------------------------------------------------------------------
>>>>>SKALASI<<<<<
#include <gl/glut.h>
void Segitiga (void)
{
    glClear (GL_COLOR_BUFFER_BIT);
    
   	glScaled(3.0, 3.0, 0.0); 
    glBegin (GL_TRIANGLE_STRIP);//hanya sampai 2 segitiga saja 
			glColor3f(1.0f, 0.0f,0.0f); glVertex3f (-0.10,-0.10,0.0);//merah
			glColor3f(1.0f, 1.0f,0.0f); glVertex3f (0.10, -0.10, 0.0);//kuning
			glColor3f(1.0f, 0.0f,1.0f); glVertex3f (-0.20f, 0.10f,0.0f);//ungu
			glColor3f(1.0f, 0.0f,1.0f); glVertex3f (0.00, 0.10, 0.0);//ungu		
    glEnd();
    glFlush ();
}

int main (int argc, char*argv[])
{
    glutInit (&argc, argv);
    glutInitWindowSize (640,480);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
    glutCreateWindow ("Menggambar Segitiga");
    glutDisplayFunc (Segitiga);
    glClearColor (1.0f, 1.0f, 1.0f, 1.0f);
    glutMainLoop ();
    return 0;
}
---------------------------------------------------------------------------------------------------------
>>>>>REFLEKSI<<<<<
#include <gl/glut.h>
void Segitiga (void)
{
    glClear (GL_COLOR_BUFFER_BIT);
 	glBegin( GL_QUADS );
 			glColor3f( 0.0, 1.0, 0.0 );//hijau
 			glVertex3f( 0.10f,0.10f, -1.0f );
 			
 			glColor3f( 1.0, 1.0, 0.0 );//kuning
			glVertex3f(-0.10f, 0.10f, -1.0f );
 			
			glColor3f( 1.0, 0.0, 0.0 );//merah
 			glVertex3f(-0.10f, -0.10f, -1.0f );
 			
 			glColor3f( 1.0, 1.0, 0.0 );//kuning
 			glVertex3f(0.10f, -0.10f, -1.0f );	
 			
 	glEnd();
 	
 	glTranslatef( -0.30f, 0.0f, 0.0f );
 	glBegin( GL_QUADS );
 			glColor3f( 0.0, 1.0, 0.0 );//hijau
			glVertex3f(-0.10f, 0.10f, -1.0f );
 			
			glColor3f( 1.0, 1.0, 0.0 );//kuning
 			glVertex3f( 0.10f,0.10f, -1.0f );
 			
 			glColor3f( 1.0, 0.0, 0.0 );//merah
 			glVertex3f(0.10f, -0.10f, -1.0f );
 			
 			glColor3f( 1.0, 1.0, 0.0 );//kuning
 			glVertex3f(-0.10f, -0.10f, -1.0f );
 glEnd();
 
 glTranslatef( 0.15f, 0.0f, 0.0f );
 glBegin( GL_LINES );
 			glColor3f( 0.0, 0.0, 0.0 );
 			glVertex3f(0.0f, 0.20f, -0.10f );
 			
 			glColor3f( 0.0, 0.0, 0.0 );
 			glVertex3f( 0.0f,-0.20f, -0.10f );
 glEnd(); 
    glFlush ();
}

int main (int argc, char*argv[])
{
    glutInit (&argc, argv);
    glutInitWindowSize (640,480);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);
    glutCreateWindow ("Menggambar Segitiga");
    glutDisplayFunc (Segitiga);
    glClearColor (1.0f, 1.0f, 1.0f, 1.0f);
    glutMainLoop ();
    return 0;
}
------------------------------------------------------------------------------------------------------------------
>>>>>SEGITIGA 3D<<<<<
#include <GL/glut.h>

void Display (void)
{
     glClear (GL_COLOR_BUFFER_BIT);
     glLoadIdentity ();
     glBegin (GL_POLYGON);
			glColor3f(0.0, 0.0,0.0);
			glVertex3f (-0.5,-0.5,-3.0);
       		
			glColor3f(1.0,0.0,0.0);
			glVertex3f (0.5, -0.5, -3.0);
			
			glColor3f(0.0, 0.0,1.0);
			glVertex3f (0.5, 0.5, -3.0);
     glEnd();
     glFlush();
}        
     
void Reshape (int x, int y)
{
	if (y==0 || x==0) return;//Jika tak ada lagi yang muncul maka berhenti

	//Mengatur proyeksi matrix baru
	glMatrixMode (GL_PROJECTION);
	glLoadIdentity();
	//Sudut : 40 derajat
	//Jarak potongan dataran terdekat : 0.5
	//Jarak potongan dataran terjauh : 20.0
	gluPerspective (40.0, (GLdouble) x/ (GLdouble) y, 0.5, 20.0);
	glMatrixMode (GL_MODELVIEW);
	glViewport (0,0,x,y);	//gunakan seluruh window untuk rendering
}

int main (int argc, char **argv)
{
    //Inisialisasi GLUT
    glutInit (&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (300,300);
    glutCreateWindow ("Intro");
    glClearColor (0.0, 0.0, 0.0, 0.0);
    glutDisplayFunc (Display);
    glutReshapeFunc (Reshape);	//mengatur kembali bentuk objek
    glutMainLoop ();
    return 0;
}
--------------------------------------------------------------------------------------------------------------------------
>>>>>TRANSFORMASI 3D<<<<<
#include <GL/glut.h>

GLfloat xRotated, yRotated, zRotated;

void Display (void)
{
     glClear (GL_COLOR_BUFFER_BIT);
     glLoadIdentity ();
     glTranslatef (0.0, 0.0, -4.0);
     glRotatef (xRotated, 1.0, 0.0, 0.0);
     glRotatef (yRotated, 0.0, 1.0, 0.0);
     glRotatef (zRotated, 0.0, 0.0, 1.0);
     glScalef (2.0, 1.0, 1.0);
     glutWireCube (1.0);
     glFlush();
     glutSwapBuffers();
}        
     
void Reshape (int x, int y)
{
	if (y==0 || x==0) return;
	glMatrixMode (GL_PROJECTION);
	glLoadIdentity();
	gluPerspective (40.0, (GLdouble) x/ (GLdouble) y, 0.5, 20.0);
	glMatrixMode (GL_MODELVIEW);
	glViewport (0,0,x,y);
}

void Idle (void)
{
	xRotated += 0.3;
	yRotated += 0.1;
	zRotated += -0.4;
	Display();
}

int main (int argc, char **argv)
{
    glutInit (&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize (300,300);
    glutCreateWindow ("Cube Example");
    glPolygonMode (GL_FRONT_AND_BACK, GL_LINE);
    xRotated = yRotated = zRotated = 0.0;
    glutDisplayFunc (Display);
    glutReshapeFunc (Reshape);
    glutIdleFunc (Idle);
    glClearColor (0.0, 0.0, 0.0, 0.0);
    glutMainLoop ();
    return 0;
}